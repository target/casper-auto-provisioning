#!/bin/bash
#
# /etc/init.d/jamf.tomcat7 -- startup script for the JSS Tomcat 7 servlet engine
#
# Written for JSS Install by JAMF Software
# Last Updated: 06/17/2014
# Refactor JVM_TMP to CATALINA_TMPDIR for setting in setenv.sh
# Updated RHEL section to remove and recreate Tomcat temp directory [D-006351]
# Updated RHEL section to check for running PID to ensure startup on reboot [D-006406]
# Originally from Ubuntu and CentOS
#
### BEGIN INIT INFO
# Provides:			 tomcat7
# Required-Start:	 $local_fs $remote_fs $network
# Required-Stop:	 $local_fs $remote_fs $network
# Should-Start:		 $named
# Should-Stop:		 $named
# Default-Start:	 2 3 4 5
# Default-Stop:		 0 1 6
# Short-Description: Start Tomcat.
# Description:		 Start the Tomcat servlet engine.
### END INIT INFO

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi

# Make sure tomcat is started with system locale
if [ -r /etc/default/locale ]; then
	. /etc/default/locale
	export LANG
fi

DISTRIB_ID=`lsb_release -i -s 2>/dev/null`

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=tomcat
DESC="Tomcat servlet engine"
JSS_HOME=/usr/local/jss

# Directory where the Tomcat 7 binary distribution resides
CATALINA_HOME=$JSS_HOME/$NAME

# Directory for per-instance configuration files and webapps
CATALINA_BASE=$JSS_HOME/$NAME

# Define other required variables
CATALINA_SH="$CATALINA_HOME/bin/catalina.sh"
CATALINA_PID="$JSS_HOME/$NAME/$NAME.pid"

# Use the Java security manager? (yes/no)
TOMCAT7_SECURITY=no

# Run Tomcat 7 as this user ID and group ID
TOMCAT7_USER=tomcat7
TOMCAT7_GROUP=tomcat7

# The first existing directory is used for JAVA_HOME (if JAVA_HOME is not
# defined in $DEFAULT)
JDK_DIRS="/usr /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.51-1.b16.el7_1.x86_64/ /usr/lib/jvm/java-7-openjdk-amd64 /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun /usr/lib/jvm/java-1.5.0-sun /usr/lib/j2sdk1.5-sun /usr/lib/j2sdk1.5-ibm"
# Look for the right JVM to use
for jdir in $JDK_DIRS; do
	if [ -r "$jdir/bin/java" -a -z "${JAVA_HOME}" ]; then
	JAVA_HOME="$jdir"
	fi
done

export JAVA_HOME

# Default Java options
# Set java.awt.headless=true if JAVA_OPTS is not set so the
# Xalan XSL transformer can work without X11 display on JDK 1.4+
# It also looks like the default heap size of 64M is not enough for most cases
# so the maximum heap size is set to 128M
if [ -z "$JAVA_OPTS" ]; then
	JAVA_OPTS="-Djava.awt.headless=true"
fi

if [ -z "$CATALINA_TMPDIR" ]; then
	CATALINA_TMPDIR="$JSS_HOME/$NAME/temp"
fi

	# Look for Java Secure Sockets Extension (JSSE) JARs
if [ -z "${JSSE_HOME}" -a -r "${JAVA_HOME}/jre/lib/jsse.jar" ]; then
	JSSE_HOME="${JAVA_HOME}/jre/"
fi

## Ubuntu specific startup utilizing the LSB functions ##
if [ "${DISTRIB_ID}" = "Ubuntu" ]; then
	set -e

	. /lib/lsb/init-functions

	if [ -r /etc/default/rcS ]; then
		. /etc/default/rcS
	fi

	# overwrite settings from default file
	if [ -f "$DEFAULT" ]; then
		. "$DEFAULT"
	fi

	if [ ! -f "$CATALINA_HOME/bin/bootstrap.jar" ]; then
		log_failure_msg "$NAME is not installed"
		exit 1
	fi

	# Set the JSP compiler if set in the tomcat7.default file
	if [ -n "$JSP_COMPILER" ]; then
		JAVA_OPTS="$JAVA_OPTS -Dbuild.compiler=\"$JSP_COMPILER\""
	fi

	SECURITY=""
	if [ "$TOMCAT7_SECURITY" = "yes" ]; then
		SECURITY="-security"
	fi

	catalina_sh() {
		# Escape any double quotes in the value of JAVA_OPTS
		JAVA_OPTS="$(echo $JAVA_OPTS | sed 's/\"/\\\"/g')"

		AUTHBIND_COMMAND=""
		if [ "$AUTHBIND" = "yes" -a "$1" = "start" ]; then
			JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true"
			AUTHBIND_COMMAND="/usr/bin/authbind --deep /bin/bash -c "
		fi

		# Define the command to run Tomcat's catalina.sh as a daemon
		# set -a tells sh to export assigned variables to spawned shells.
		TOMCAT_SH="set -a; JAVA_HOME=\"$JAVA_HOME\"; source \"$DEFAULT\"; \
			CATALINA_HOME=\"$CATALINA_HOME\"; \
			CATALINA_BASE=\"$CATALINA_BASE\"; \
			JAVA_OPTS=\"$JAVA_OPTS\"; \
			CATALINA_PID=\"$CATALINA_PID\"; \
			CATALINA_TMPDIR=\"$CATALINA_TMPDIR\"; \
			LANG=\"$LANG\"; JSSE_HOME=\"$JSSE_HOME\"; \
			cd \"$CATALINA_BASE\"; \
			\"$CATALINA_SH\" $@"

		if [ "$AUTHBIND" = "yes" -a "$1" = "start" ]; then
			TOMCAT_SH="'$TOMCAT_SH'"
		fi

		# Run the catalina.sh script as a daemon
		set +e
		touch "$CATALINA_PID" "$CATALINA_BASE"/logs/catalina.out "$CATALINA_BASE"/logs/tomcatinit.log
		chown $TOMCAT7_USER "$CATALINA_PID" "$CATALINA_BASE"/logs/catalina.out "$CATALINA_BASE"/logs/tomcatinit.log
		start-stop-daemon --start -b -u "$TOMCAT7_USER" -g "$TOMCAT7_GROUP" \
			-c "$TOMCAT7_USER" -d "$CATALINA_TMPDIR" \
			-x /bin/bash -- -c "$AUTHBIND_COMMAND $TOMCAT_SH"
		/bin/bash "$CATALINA_BASE"/bin/version.sh >"$CATALINA_BASE"/logs/tomcatinit.log
		status="$?"
		set +a -e
		return $status
	}

	case "$1" in
	  start)
		if [ -z "$JAVA_HOME" ]; then
			log_failure_msg "no JDK found - please set JAVA_HOME"
			exit 1
		fi

		if [ ! -d "$CATALINA_BASE/conf" ]; then
			log_failure_msg "invalid CATALINA_BASE: $CATALINA_BASE"
			exit 1
		fi

		log_daemon_msg "Starting $DESC" "$NAME"
		if start-stop-daemon --test --start --pidfile "$CATALINA_PID" \
			--user $TOMCAT7_USER --exec "$JAVA_HOME/bin/java" \
			>/dev/null; then

			umask 022
			# Remove / recreate CATALINA_TMPDIR directory
			rm -rf "$CATALINA_TMPDIR"
			mkdir -p "$CATALINA_TMPDIR" || {
				log_failure_msg "could not create JVM temporary directory"
				exit 1
			}
			chown $TOMCAT7_USER "$CATALINA_TMPDIR"

			catalina_sh start $SECURITY
			sleep 5
				if start-stop-daemon --test --start --pidfile "$CATALINA_PID" \
				--user $TOMCAT7_USER --exec "$JAVA_HOME/bin/java" \
				>/dev/null; then
				if [ -f "$CATALINA_PID" ]; then
					rm -f "$CATALINA_PID"
				fi
				log_end_msg 1
			else
				log_end_msg 0
			fi
		else
				log_progress_msg "(already running)"
			log_end_msg 0
		fi
		;;
	  stop)
		log_daemon_msg "Stopping $DESC" "$NAME"

		set +e
		if [ -f "$CATALINA_PID" ]; then
			start-stop-daemon --stop --pidfile "$CATALINA_PID" \
				--user "$TOMCAT7_USER" \
				--retry=TERM/20/KILL/5 >/dev/null
			if [ $? -eq 1 ]; then
				log_progress_msg "$DESC is not running but pid file exists, cleaning up"
			elif [ $? -eq 3 ]; then
				PID="`cat $CATALINA_PID`"
				log_failure_msg "Failed to stop $NAME (pid $PID)"
				exit 1
			fi
			rm -f "$CATALINA_PID"
			rm -rf "$CATALINA_TMPDIR"
		else
			log_progress_msg "(not running)"
		fi
		log_end_msg 0
		set -e
		;;
	   status)
		set +e
		start-stop-daemon --test --start --pidfile "$CATALINA_PID" \
			--user $TOMCAT7_USER --exec "$JAVA_HOME/bin/java" \
			>/dev/null 2>&1
		if [ "$?" = "0" ]; then

			if [ -f "$CATALINA_PID" ]; then
				log_success_msg "$DESC is not running, but pid file exists."
				exit 1
			else
				log_success_msg "$DESC is not running."
				exit 3
			fi
		else
			log_success_msg "$DESC is running with pid `cat $CATALINA_PID`"
		fi
		set -e
			;;
	  restart|force-reload)
		if [ -f "$CATALINA_PID" ]; then
			$0 stop
			sleep 1
		fi
		$0 start
		;;
	  try-restart)
			if start-stop-daemon --test --start --pidfile "$CATALINA_PID" \
			--user $TOMCAT7_USER --exec "$JAVA_HOME/bin/java" \
			>/dev/null; then
			$0 start
		fi
			;;
	  *)
		log_success_msg "Usage: $0 {start|stop|restart|try-restart|force-reload|status}"
		exit 1
		;;
	esac
	exit 0

## CentOS/RHEL specific startup utilizing bash functions ##
else
	# Start script for JSS Tomcat 7
	# RHEL/CentOS Section
	# chkconfig: 2345 84 15
	# description: JSS Tomcat 7 start script
	# processname: tomcat7
	# pidfile: /var/run/tomcat.pid
	. /etc/rc.d/init.d/functions

	RETVAL=0

	running() {
		ps www -u ${TOMCAT7_USER} | grep org.apache.catalina.startup.Bootstrap | grep -v grep
	}

	PID() {
		running | awk '{print $1}'
	}

	case "$1" in
	   start)
		if [[ -f "$CATALINA_PID" && -n $(PID) ]]; then
				echo "${NAME} already running with PID: $(PID)"
				exit 1
			fi
			echo "Starting ${NAME}:"
			echo

		set +e
		# Remove / recreate CATALINA_TMPDIR directory
		rm -rf "$CATALINA_TMPDIR"
		mkdir -p "$CATALINA_TMPDIR"

		touch "$CATALINA_PID" "$CATALINA_BASE"/logs/catalina.out "$CATALINA_BASE"/logs/tomcatinit.log
		chown $TOMCAT7_USER "$CATALINA_PID" "$CATALINA_BASE"/logs/catalina.out "$CATALINA_BASE"/logs/tomcatinit.log "$CATALINA_TMPDIR"

		TOMCAT_SH="set -a; JAVA_HOME=\"$JAVA_HOME\"; \
			CATALINA_HOME=\"$CATALINA_HOME\"; \
			CATALINA_BASE=\"$CATALINA_BASE\"; \
			JAVA_OPTS=\"$JAVA_OPTS\"; \
			CATALINA_PID=\"$CATALINA_PID\"; \
			CATALINA_TMPDIR=\"$CATALINA_TMPDIR\"; \
			LANG=\"$LANG\"; JSSE_HOME=\"$JSSE_HOME\"; \
			cd \"$CATALINA_BASE\"; \
			\"$CATALINA_SH\" $@"
			/bin/bash "$CATALINA_BASE"/bin/version.sh >"$CATALINA_BASE"/logs/tomcatinit.log
			su ${TOMCAT7_USER} -c "$TOMCAT_SH"
			sleep 5
			echo "Tomcat is running with PID: $(PID)"
			;;
	   stop)
			if [[ -f "$CATALINA_PID" || -n $(PID) ]]; then
		    	echo "Shutting down ${NAME} with PID: $(PID)"
		    	su ${TOMCAT7_USER} -c "${CATALINA_HOME}/bin/catalina.sh stop" >/dev/null 2>&1
				rm -f "$CATALINA_PID"
				rm -rf "$CATALINA_TMPDIR"
			else
				echo "${NAME} not running"
				exit 1
			fi
			sleep 4
			if [[ -n $(running) ]]; then
				$0 kill
			fi
			;;
	   restart)
			$0 stop
			sleep 5
			$0 start
		;;
	   kill)
		if [[ -f "$CATALINA_PID" || -n $(PID) ]]; then
				echo "Killing ${NAME} process: $(PID)"
				kill -9 $(PID)
				if [ -f "$CATALINA_PID" ] ; then
					rm -f "$CATALINA_PID"
				fi
		else
			echo "Tomcat is not running"
		fi
		;;
	   status)
		if [[ -f "$CATALINA_PID" || -n $(PID) ]]; then
				echo "Process ${NAME} running with properties: "
				echo $(running)
			else
				echo "Process ${NAME} not running"
			fi
	 ;;
	   pid)
			if [[ -f "$CATALINA_PID" || -n $(PID) ]]; then
				echo "Process ${NAME} running with PID: $(PID)"
			else
				echo "Process ${NAME} not running"
			fi
		;;
	   version)
		echo "Checking version for ${NAME}:"
			echo
		su ${TOMCAT7_USER} -c "${CATALINA_HOME}/bin/catalina.sh version"
			;;
	   *)
			echo "Usage: $0 {start|stop|kill|restart|status|pid|version}"
			echo "Command ${CATALINA_HOME}/bin/catalina.sh accepts additional parameters as well"
			exit 1
	esac
	exit ${RETVAL}
fi
